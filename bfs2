from collections import deque

def lire_graphe(fichier):
    with open(fichier, 'r') as f:
        lignes = f.readlines()
        
    # Nombre de sommets
    n = int(lignes[0].strip())
    
    # Noms des sommets
    noms = lignes[1].strip().split()
    
    # Matrice d'adjacence
    matrice = []
    for i in range(2, 2 + n):
        matrice.append(list(map(int, lignes[i].strip().split())))
    
    return n, noms, matrice

def bfs(graphe, sommet_depart):
    n, noms, matrice = graphe
    visite = [False] * n
    file = deque([sommet_depart])
    visite[sommet_depart] = True
    ordre = []
    
    while file:
        sommet = file.popleft()
        ordre.append(noms[sommet])
        
        # Ajouter les voisins non visités
        for voisin in range(n):
            if matrice[sommet][voisin] > 0 and not visite[voisin]:
                file.append(voisin)
                visite[voisin] = True
    
    return ordre

# Charger le graphe
fichier = "votre_fichier.txt"  # Remplacez par le chemin de votre fichier texte
graphe = lire_graphe(fichier)

# Effectuer le BFS depuis le sommet 0 (Microflores_du_sol)
resultat = bfs(graphe, 0)
print("Ordre du parcours BFS :", resultat)

// en c 

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_SOMMETS 100

// Structure pour représenter une file
typedef struct {
    int items[MAX_SOMMETS];
    int front, rear;
} File;

void initFile(File *file) {
    file->front = -1;
    file->rear = -1;
}

bool estVide(File *file) {
    return file->front == -1;
}

void enfiler(File *file, int valeur) {
    if (file->rear == MAX_SOMMETS - 1) {
        printf("Erreur : file pleine\n");
        return;
    }
    if (file->front == -1) file->front = 0;
    file->rear++;
    file->items[file->rear] = valeur;
}

int defiler(File *file) {
    if (estVide(file)) {
        printf("Erreur : file vide\n");
        exit(1);
    }
    int valeur = file->items[file->front];
    file->front++;
    if (file->front > file->rear) {
        file->front = file->rear = -1;
    }
    return valeur;
}

// Lecture du graphe à partir d'un fichier
void lireGraphe(const char *nomFichier, int *n, char noms[MAX_SOMMETS][30], int matrice[MAX_SOMMETS][MAX_SOMMETS]) {
    FILE *fichier = fopen(nomFichier, "r");
    if (!fichier) {
        printf("Erreur : impossible d'ouvrir le fichier\n");
        exit(1);
    }

    // Lire le nombre de sommets
    fscanf(fichier, "%d", n);

    // Lire les noms des sommets
    for (int i = 0; i < *n; i++) {
        fscanf(fichier, "%s", noms[i]);
    }

    // Lire la matrice d'adjacence
    for (int i = 0; i < *n; i++) {
        for (int j = 0; j < *n; j++) {
            fscanf(fichier, "%d", &matrice[i][j]);
        }
    }

    fclose(fichier);
}

// BFS
void bfs(int n, int matrice[MAX_SOMMETS][MAX_SOMMETS], int sommetDepart, char noms[MAX_SOMMETS][30]) {
    bool visite[MAX_SOMMETS] = {false};
    File file;
    initFile(&file);

    enfiler(&file, sommetDepart);
    visite[sommetDepart] = true;

    printf("Ordre du parcours BFS : ");

    while (!estVide(&file)) {
        int sommet = defiler(&file);
        printf("%s ", noms[sommet]);

        // Parcourir les voisins du sommet
        for (int voisin = 0; voisin < n; voisin++) {
            if (matrice[sommet][voisin] > 0 && !visite[voisin]) {
                enfiler(&file, voisin);
                visite[voisin] = true;
            }
        }
    }

    printf("\n");
}

// Fonction principale
int main() {
    int n;
    char noms[MAX_SOMMETS][30];
    int matrice[MAX_SOMMETS][MAX_SOMMETS];

    const char *nomFichier = "votre_fichier.txt";

    // Lecture du graphe
    lireGraphe(nomFichier, &n, noms, matrice);

    // Effectuer le BFS depuis le sommet 0 (Microflores_du_sol)
    int sommetDepart = 0; // Indice du sommet de départ
    bfs(n, matrice, sommetDepart, noms);

    return 0;
}

