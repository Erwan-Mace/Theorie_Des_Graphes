#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define N 6 // Nombre de sommets (à ajuster selon le fichier)

// Noms des sommets
char noms[N][20];
int adj[N][N];

// Fonction pour lire le fichier et remplir la matrice d'adjacence avec les poids
void lireFichier(const char *nomFichier) {
    FILE *file = fopen(nomFichier, "r");
    if (file == NULL) {
        perror("Erreur d'ouverture du fichier");
        exit(EXIT_FAILURE);
    }

    // Lecture des noms des sommets
    for (int i = 0; i < N; i++) {
        fscanf(file, "%s", noms[i]);
    }

    // Lecture de la matrice d'adjacence avec les poids
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            fscanf(file, "%d", &adj[i][j]);
        }
    }

    fclose(file);
}

// Fonction pour afficher les successeurs et les poids d'un sommet
void afficher_successeurs(int sommet) {
    printf("Successeurs de %s : ", noms[sommet]);
    int trouve = 0;
    for (int j = 0; j < N; j++) {
        if (adj[sommet][j] > 0) { // Affiche seulement si l'arc a un poids supérieur à zéro
            printf("%s (poids %d) ", noms[j], adj[sommet][j]);
            trouve = 1;
        }
    }
    if (!trouve) {
        printf("Aucun");
    }
    printf("\n");
}

// Fonction pour afficher les prédécesseurs et les poids d'un sommet
void afficher_predecesseurs(int sommet) {
    printf("Predecesseurs de %s : ", noms[sommet]);
    int trouve = 0;
    for (int i = 0; i < N; i++) {
        if (adj[i][sommet] > 0) { // Affiche seulement si l'arc a un poids supérieur à zéro
            printf("%s (poids %d) ", noms[i], adj[i][sommet]);
            trouve = 1;
        }
    }
    if (!trouve) {
        printf("Aucun");
    }
    printf("\n");
}

int main() {
    lireFichier("Graphe1.txt");

    for (int i = 0; i < N; i++) {
        afficher_successeurs(i);
        afficher_predecesseurs(i);
        printf("\n");
    }

    return 0;
}

